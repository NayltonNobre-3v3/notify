{"version":3,"sources":["api/api.js","screens/main.js","Actions/SensorListActions.js","Constants/SensorContants.js","routes.js","App.js","store/store.js","Reducers/SensorListReducer.js","index.js"],"names":["api","axios","create","baseURL","Main","useState","medicao","setMedicao","local","setItems","ShowEdit","setShowEdit","IDAlert","setIDAlert","idSensor","setIdSensor","nameSensor","setNameSensor","valueSensor","setValueSensor","unitSensor","setUnitSensor","condSensor","setCondSensor","TimeSensor","setTimeSensor","DestSensor","setDestSensor","SensorList","useSelector","state","sensorList","sensors","dispatch","loading","error","useDispatch","ListOneSensor","e","a","get","target","value","data","json","JSON","stringify","parse","values","map","item","TYPE","ID","NAME","ShowEditForm","ListOneSensorEdit","ID_SENSOR","VALUE","COND","TIME","EMAIL","useEffect","type","payload","message","getValues","console","log","className","onSubmit","preventDefault","obj","Number","POSITION","put","then","id","htmlFor","onChange","required","title","i","key","UNIT","placeholder","min","max","onClick","_","post","disabled","length","defaultValue","MEDITION","created_at","color","window","confirm","delete","size","Routes","path","component","MainScreen","exact","App","autoClose","reducer","combineReducers","action","composeEnnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c9935a6.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst api=axios.create({\r\n    baseURL:\"http://localhost:8000\"\r\n})\r\n\r\nexport default api","import React, { useState, useEffect } from \"react\";\r\nimport { FaPen, FaTrash } from \"react-icons/fa\";\r\nimport { AiFillAlert, AiFillFrown } from \"react-icons/ai\";\r\nimport api from \"../api/api\";\r\n// import moment from \"moment\";\r\n// import { toast, Zoom } from \"react-toastify\";\r\n\r\nimport \"./style.css\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { listSensor} from \"../Actions/SensorListActions\";\r\n\r\nfunction Main() {\r\n  const [medicao, setMedicao] = useState([]);\r\n  const [local, setItems] = useState([]);\r\n  const [ShowEdit, setShowEdit] = useState(false);\r\n  const [IDAlert, setIDAlert] = useState(0);\r\n\r\n  const [idSensor, setIdSensor] = useState(0);\r\n  const [nameSensor, setNameSensor] = useState(\"\");\r\n  const [valueSensor, setValueSensor] = useState(\"\");\r\n  const [unitSensor, setUnitSensor] = useState(\"\");\r\n  const [condSensor, setCondSensor] = useState(\"\");\r\n  const [TimeSensor, setTimeSensor] = useState(0);\r\n  const [DestSensor, setDestSensor] = useState(\"\");\r\n\r\n  // Pego a o meu estado\r\n  const SensorList = useSelector((state) => state.sensorList);\r\n  // Listando todos os sensores que estão no banco\r\n  const { sensors, loading, error } = SensorList;\r\n\r\n  // Disparador de actions\r\n  const dispatch = useDispatch();\r\n\r\n  // Carrega todo o valores quando eu reiniciar o estado\r\n  useEffect(() => {\r\n    dispatch(listSensor());\r\n  }, []);\r\n\r\n  // Quando iniciar a aplicação irá carregar todos os valores do banco\r\n  useEffect(() => {\r\n    async function getValues() {\r\n      const { data } = await api.get(\"notify-sensors-alert\");\r\n      setItems(data.data);\r\n    }\r\n    getValues();\r\n  }, []);\r\n\r\n  // Extrai as medições do sensor específico\r\n  async function ListOneSensor(e) {\r\n    const data = await api.get(`notify-get-sensors/${e.target.value}`);\r\n    const json = JSON.stringify(data.data);\r\n    const medicao = JSON.parse(json);\r\n    // const values = Object.values(medicao).map((item) => item.MEASURES);\r\n    const values = medicao.map((item) => item.TYPE);\r\n    setMedicao(values);\r\n    setIdSensor(data.data[0].ID);\r\n    setNameSensor(data.data[0].NAME);\r\n    // console.log('MEDIÇÃO= ',values)\r\n  }\r\n\r\n  async function ListOneSensorEdit(e) {\r\n    const data = await api.get(`notify-get-sensors/${e}`);\r\n    const json = JSON.stringify(data.data);\r\n    const medicao = JSON.parse(json);\r\n    const values = medicao.map((item) => item.TYPE);\r\n    setMedicao(values);\r\n    setIdSensor(data.data[0].ID);\r\n    setNameSensor(data.data[0].NAME);\r\n  }\r\n\r\n  // POST\r\n  function submitHandle(e) {\r\n    e.preventDefault();\r\n\r\n    let obj = {\r\n      ID_SENSOR: idSensor,\r\n      VALUE: Number(unitSensor),\r\n      NAME: nameSensor,\r\n      POSITION: Number(valueSensor),\r\n      COND: condSensor,\r\n      TIME: Number(TimeSensor),\r\n      EMAIL: DestSensor,\r\n    };\r\n\r\n    api.post(\"notify-post-sensor-alert\", obj)\r\n      .then(data => {\r\n        console.log('DATA DO THEN= ', data.data.data)\r\n        setItems(data.data.data)\r\n      })\r\n\r\n    // dispatch(Save(obj))\r\n\r\n  }\r\n  // PUT\r\n  function submitHandlePUT(e) {\r\n    e.preventDefault();\r\n\r\n    let obj = {\r\n      ID_SENSOR: idSensor,\r\n      VALUE: Number(unitSensor),\r\n      NAME: nameSensor,\r\n      POSITION: Number(valueSensor),\r\n      COND: condSensor,\r\n      TIME: Number(TimeSensor),\r\n      EMAIL: DestSensor,\r\n    };\r\n    // console.log(\"OBJ= \", obj);\r\n    api.put(`/notify-put-sensor-alert/${IDAlert}`, obj)\r\n    .then(data => {\r\n      console.log('DATA DO THEN= ', data.data.data)\r\n      setItems(data.data.data)\r\n    })\r\n    \r\n  }\r\n  // DELETE\r\n  function handleDelete(id) {\r\n    if (window.confirm(\"Tem certeza que deseja deletar o alarme?\")) {\r\n      api.delete(`notify-delete-sensor-alert/${id}`)\r\n      .then(data => {\r\n        console.log('DATA DO THEN= ', data.data)\r\n        setItems(data.data.data)\r\n      })\r\n    }\r\n    // setItems(local);\r\n  }\r\n\r\n// Mostrar o Formulário de edição\r\n  function ShowEditForm(data) {\r\n    ListOneSensorEdit(data.ID_SENSOR);\r\n    setValueSensor(data.VALUE);\r\n    setCondSensor(data.COND);\r\n    setTimeSensor(data.TIME);\r\n    setIDAlert(data.ID);\r\n    setDestSensor(data.EMAIL);\r\n    setShowEdit(true);\r\n  }\r\n  // Ocultar o Formulário de edição\r\n  function hideEditForm() {\r\n    setMedicao([]);\r\n    setIdSensor(0);\r\n    setNameSensor(\"\");\r\n    setValueSensor(\"\");\r\n    setUnitSensor(\"\");\r\n    setCondSensor(\"0\");\r\n    setTimeSensor(0);\r\n    setDestSensor(\"\");\r\n    setShowEdit(false);\r\n  }\r\n  console.log('ESTOU IMPRIMINDO= ',valueSensor)\r\n  return (\r\n    <div className=\"container\">\r\n      <main>\r\n        <div className=\"monitSelect\">\r\n          {ShowEdit ? (\r\n            <form onSubmit={submitHandlePUT}>\r\n              <fieldset>\r\n                <h1 id=\"titleForm\">Editar Alarme</h1>\r\n                <br />\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectModel\">Nome do sensor:</label>\r\n                  <select\r\n                    id=\"selectModel\"\r\n                    onChange={ListOneSensor}\r\n                    required\r\n                    title=\"Nome do sensor\"\r\n                    value={nameSensor}\r\n                  >\r\n                    <option value={idSensor}>{nameSensor}</option>\r\n\r\n                    {sensors.map((e, i) => (\r\n                      <option value={e.ID} key={i}>\r\n                        {e.NAME}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectMeasures\">Medição:</label>\r\n                  <select\r\n                    id=\"selectMeasures\"\r\n                    onChange={(e) => setValueSensor(e.target.value)}\r\n                    title=\"Medida do sensor\"\r\n                    required\r\n                  // value={}\r\n                  >\r\n                    {medicao.map((item) =>\r\n                      item.map((e, i) => (\r\n                        <option value={`${i}`} key={i} data={e.UNIT}>\r\n                          {e}\r\n                        </option>\r\n                      ))\r\n                    )}\r\n                  </select>\r\n                </div>\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectUnit\">Valor:</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    id=\"ValueInput\"\r\n                    value={valueSensor}\r\n                    onChange={(e) => setUnitSensor(e.target.value)}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"condition\">Condição:</label>\r\n                  <select\r\n                    onChange={(e) => {\r\n                      setCondSensor(e.target.value);\r\n                    }}\r\n                    title=\"Condição para alarmar\"\r\n                    value={condSensor}\r\n                    required\r\n                  >\r\n                    <option value=\"ACIMA\">Acima</option>\r\n                    <option value=\"ABAIXO\">Abaixo</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectTime\" title=\"Tempo em minutos\">\r\n                    Tempo (minutos):\r\n                  </label>\r\n                  <input\r\n                    id=\"selectTime\"\r\n                    type=\"number\"\r\n                    value={TimeSensor}\r\n                    placeholder=\"Selecione o tempo\"\r\n                    min={0}\r\n                    max={59}\r\n                    onChange={(e) => setTimeSensor(e.target.value)}\r\n                    required\r\n                  ></input>\r\n                </div>\r\n\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectDest\" title=\"Destinatário\">\r\n                    Destinatário:\r\n                  </label>\r\n                  <input\r\n                    id=\"selectDest\"\r\n                    type=\"email\"\r\n                    value={DestSensor}\r\n                    placeholder=\"Selecione o destinatário\"\r\n                    onChange={(e) => setDestSensor(e.target.value)}\r\n                    required\r\n                  ></input>\r\n                </div>\r\n                <div className=\"buttons-container\">\r\n                  <button type=\"submit\">Atualizar alerta</button>\r\n                  <button type=\"button\" onClick={(_) => hideEditForm()}>\r\n                    Voltar\r\n                  </button>\r\n                </div>\r\n              </fieldset>\r\n            </form>\r\n          ) : (\r\n              <form onSubmit={submitHandle}>\r\n                <fieldset>\r\n                  <h1 id=\"titleForm\">Criar Alarme</h1>\r\n                  <br />\r\n                  <div className=\"input-group\">\r\n                    <label htmlFor=\"selectModel\">Nome do sensor:</label>\r\n                    <select\r\n                      id=\"selectModel\"\r\n                      onChange={ListOneSensor}\r\n                      value={nameSensor ? idSensor : \"1\"}\r\n\r\n                      required\r\n                      title=\"Nome do sensor\"\r\n                    >\r\n                      <option value=\"1\" disabled>\r\n                        Selecione\r\n                    </option>\r\n                      {sensors.map((e, i) => (\r\n                        <option value={e.ID} key={i}>\r\n                          {e.NAME}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div className=\"input-group\">\r\n                    <label htmlFor=\"selectMeasures\">Medição:</label>\r\n                    <select\r\n                      id=\"selectMeasures\"\r\n                      disabled={medicao.length === 0 ? true : false}\r\n                      onChange={(e) => setValueSensor(e.target.value)}\r\n                      title=\"Medida do sensor\"\r\n                      // defaultValue={nameSensor?\"1\":condSensor}\r\n                      required\r\n                    >\r\n                      <option value=\"1\" disabled>\r\n                        {/* {console.log(nameSensor ===0?'EXISTE':'VAZIO' )} */}\r\n                      Selecione\r\n                    </option>\r\n                      {medicao.map((item) =>\r\n                        item.map((e, i) => (\r\n                          <option value={`${i}`} key={i}>\r\n                            {e}\r\n                          </option>\r\n                        ))\r\n                      )}\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div className=\"input-group\">\r\n                    <label htmlFor=\"selectUnit\">Valor:</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"ValueInput\"\r\n                      onChange={(e) => setUnitSensor(e.target.value)}\r\n                      value={unitSensor}\r\n                      disabled={medicao.length === 0 ? true : false}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"input-group\">\r\n                    <label htmlFor=\"condition\">Condição:</label>\r\n                    <select\r\n                      disabled={medicao.length === 0 ? true : false}\r\n                      onChange={(e) => {\r\n                        setCondSensor(e.target.value);\r\n                      }}\r\n                      title=\"Condição para alarmar\"\r\n                      defaultValue={!condSensor ? \"0\" : condSensor}\r\n                      required\r\n                    >\r\n                      <option value=\"0\" disabled>\r\n                        Selecione\r\n                    </option>\r\n                      <option value=\"ACIMA\">Acima</option>\r\n                      <option value=\"ABAIXO\">Abaixo</option>\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div className=\"input-group\">\r\n                    <label htmlFor=\"selectTime\" title=\"Tempo em minutos\">\r\n                      Tempo (minutos):\r\n                  </label>\r\n                    <input\r\n                      id=\"selectTime\"\r\n                      type=\"number\"\r\n                      value={TimeSensor}\r\n                      placeholder=\"Selecione o tempo\"\r\n                      min={0}\r\n                      max={59}\r\n                      disabled={medicao.length === 0 ? true : false}\r\n                      onChange={(e) => setTimeSensor(e.target.value)}\r\n                      required\r\n                    ></input>\r\n                  </div>\r\n\r\n                  <div className=\"input-group\">\r\n                    <label htmlFor=\"selectDest\" title=\"Destinatário\">\r\n                      Destinatário:\r\n                  </label>\r\n                    <input\r\n                      id=\"selectDest\"\r\n                      type=\"email\"\r\n                      value={DestSensor}\r\n                      placeholder=\"Selecione o destinatário\"\r\n                      disabled={medicao.length === 0 ? true : false}\r\n                      onChange={(e) => setDestSensor(e.target.value)}\r\n                      required\r\n                    ></input>\r\n                  </div>\r\n                  <div className=\"buttons-container\">\r\n                    <button\r\n                      type=\"submit\"\r\n                      disabled={medicao.length === 0 ? true : false}\r\n                    >\r\n                      Criar Alerta\r\n                  </button>\r\n                  </div>\r\n                </fieldset>\r\n              </form>\r\n            )}\r\n        </div>\r\n\r\n        <div className=\"mySchedule\">\r\n          <ul className=\"list-cards\">\r\n            {local && local.length !== 0 ? (\r\n              local.map((e, i) => (\r\n                <li className=\"card\" key={e.ID}>\r\n                  <div className=\"head-card\">\r\n                    <h1>{e.NAME}</h1>\r\n                  </div>\r\n                  <div className=\"content-card\">\r\n                    <p>\r\n                      Condição: {e.COND} de {e.VALUE} {e.MEDITION}\r\n                    </p>\r\n                    <p>Tempo para enviar alerta: {e.TIME / 60} min</p>\r\n                  </div>\r\n                  <div id=\"footer-Container\">\r\n                    <p className=\"date-detail\">\r\n                      Alerta criado em {e.created_at}\r\n                    </p>\r\n\r\n                    <div id=\"buttons-Container\">\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"edit-button\"\r\n                        onClick={() => ShowEditForm(e)}\r\n                      >\r\n                        <FaPen color=\"white\" />\r\n                      </button>\r\n                      <button\r\n                        className=\"delete-button\"\r\n                        onClick={(_) => handleDelete(e.ID)}\r\n                      >\r\n                        <FaTrash color=\"white\" />\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </li>\r\n              ))\r\n            ) : (\r\n                <div id=\"not-found\">\r\n                  {\" \"}\r\n                  <AiFillFrown size={60} /> Nenhum alerta registrado\r\n                </div>\r\n              )}\r\n          </ul>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import api from \"../api/api\";\r\nimport {\r\n  SENSOR_LIST_SUCESS,\r\n  SENSOR_LIST_FAIL,\r\n  SENSOR_LIST_REQUEST,\r\n} from \"../Constants/SensorContants\";\r\n\r\nconst listSensor = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: SENSOR_LIST_REQUEST });\r\n    const { data } = await api.get(\"notify-get-sensors\");\r\n    dispatch({ type: SENSOR_LIST_SUCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: SENSOR_LIST_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\n// const listSensorAlert = () => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: SENSOR_ALERT_REQUEST });\r\n//     const { data } = await api.get(\"sensors-alert\");\r\n//     dispatch({ type: SENSOR_ALERT_SUCCESS, payload: data });\r\n//   } catch (error) {\r\n//     dispatch({ type: SENSOR_ALERT_ERROR, payload: error.message });\r\n//   }\r\n// };\r\n\r\n// const listOneSensor = (id) => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: SENSOR_DETAILS_REQUEST });\r\n//     const { data } = await api.get(`get-sensor-monitoring/${id}`);\r\n//     console.log('LIST ONE SENSOR= ',data[0])\r\n//     dispatch({ type: SENSOR_DETAILS_SUCESS, payload: data[0] });\r\n//   } catch (error) {\r\n//     dispatch({ type: SENSOR_DETAILS_FAIL, payload: error.message });\r\n//   }\r\n// };\r\n\r\n// const productsDetails = (ProductID) => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: SENSOR_DETAILS_REQUEST, payload: ProductID });\r\n//     const sensor = await api.get(`get-sensor-monitoring/${SensorID}`);\r\n//     dispatch({ type: SENSOR_DETAILS_SUCESS, payload: sensor.data });\r\n//   } catch (error) {\r\n//     dispatch({ type: SENSOR_DETAILS_FAIL, payload: error.message });\r\n//   }\r\n// };\r\n\r\n// const Delete = (id) => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: SENSOR_DELETE_REQUEST});\r\n//     const {data} = await api.delete(`/delete-sensor-alert/${id}`);\r\n//     // console.log(\"DATA DELETE\",product)\r\n//     dispatch({ type: SENSOR_DELETE_SUCESS, payload: data,sucess:true});\r\n//   } catch (error) {\r\n//     dispatch({ type: SENSOR_DELETE_FAIL, payload: error.message});\r\n//   }\r\n// };\r\n\r\n// const Save = (obj) => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: SENSOR_SAVE_REQUEST});\r\n//     const data = await api.post(\"post-sensor-alert\", obj);\r\n//     // console.log(\"DATA DELETE\",product)\r\n//     dispatch({ type: SENSOR_SAVE_SUCCESS, payload: data,sucess:true});\r\n//   } catch (error) {\r\n//     dispatch({ type: SENSOR_SAVE_ERROR, payload: error.message});\r\n//   }\r\n// };\r\n\r\n\r\nexport { listSensor};","const SENSOR_LIST_REQUEST = \"SENSOR_LIST_REQUEST\";\r\nconst SENSOR_LIST_SUCESS = \"SENSOR_LIST_SUCESS\";\r\nconst SENSOR_LIST_FAIL = \"SENSOR_LIST_FAIL\";\r\n\r\nconst SENSOR_DETAILS_REQUEST = \"SENSOR_DETAILS_REQUEST\";\r\nconst SENSOR_DETAILS_SUCESS = \"SENSORDETAILST_SUCESS\";\r\nconst SENSOR_DETAILS_FAIL = \"SENSOR_DETAILS_FAIL\";\r\n\r\nconst SENSOR_DELETE_REQUEST = \"SENSOR_DELETE_REQUEST\";\r\nconst SENSOR_DELETE_SUCESS = \"SENSOR_DELETE_SUCESS\";\r\nconst SENSOR_DELETE_FAIL = \"SENSOR_DELETE_FAIL\";\r\n\r\nconst SENSOR_ALERT_REQUEST = \"SENSOR_ALERT_REQUEST\";\r\nconst SENSOR_ALERT_SUCCESS = \"SENSOR_ALERT_SUCCESS\";\r\nconst SENSOR_ALERT_ERROR = \"SENSOR_ALERT_ERROR\";\r\n\r\nconst SENSOR_SAVE_REQUEST = \"SENSOR_SAVE_REQUEST\";\r\nconst SENSOR_SAVE_SUCCESS = \"SENSOR_SAVE_SUCCESS\";\r\nconst SENSOR_SAVE_ERROR = \"SENSOR_SAVE_ERROR\";\r\n\r\n\r\nexport {\r\n  SENSOR_LIST_FAIL,\r\n  SENSOR_LIST_SUCESS,\r\n  SENSOR_LIST_REQUEST,\r\n  SENSOR_DETAILS_FAIL,\r\n  SENSOR_DETAILS_REQUEST,\r\n  SENSOR_DETAILS_SUCESS,\r\n  SENSOR_DELETE_FAIL,\r\n  SENSOR_DELETE_REQUEST,\r\n  SENSOR_DELETE_SUCESS,\r\n  SENSOR_ALERT_REQUEST,\r\n  SENSOR_ALERT_SUCCESS,\r\n  SENSOR_ALERT_ERROR,\r\n  SENSOR_SAVE_SUCCESS,\r\n  SENSOR_SAVE_ERROR,\r\n  SENSOR_SAVE_REQUEST\r\n};","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nimport MainScreen from \"./screens/main\";\r\n\r\n\r\nfunction Routes() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/\" component={MainScreen} exact/>\r\n        {/* <Route path=\"/Edit/:id\" component={EditScreen}/> */}\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\n\r\nimport \"./Global.css\";\r\nimport Route from \"./routes\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Route />\r\n      <ToastContainer autoClose={3000}>\r\n        position=\"top-right\" \r\n        autoClose={2000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick rtl={false}\r\n        pauseOnFocusLoss \r\n        draggable \r\n        pauseOnHover\r\n      </ToastContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createStore, combineReducers, compose, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {\r\n  SensorListReducer,\r\n} from \"../Reducers/SensorListReducer\";\r\nconst initialState = {};\r\n\r\nconst reducer = combineReducers({\r\n  sensorList: SensorListReducer,\r\n  // sensorDetail:SensorDetailReducer,\r\n  // SensorDelete: SensorDeleteReducer,\r\n  // SensorAlertList:SensorAlertListReducer,\r\n  // SensorSave: SensorSaveReducer\r\n});\r\nconst composeEnnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  initialState,\r\n  composeEnnhancer(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store","// Constantes usadas para evitar erros de digitações\r\nimport {\r\n  SENSOR_LIST_FAIL,\r\n  SENSOR_LIST_REQUEST,\r\n  SENSOR_LIST_SUCESS,\r\n} from \"../Constants/SensorContants\";\r\n\r\n// Reducar irá possuir um estado inicial e recebe action\r\nfunction SensorListReducer(state = { sensors: [] }, action) {\r\n  switch (action.type) {\r\n    case SENSOR_LIST_REQUEST:\r\n      return { loading: true, sensors: [] };\r\n    case SENSOR_LIST_SUCESS:\r\n      return { loading: false, sensors: action.payload };\r\n    case SENSOR_LIST_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// function SensorSaveReducer(state = {  sensor: {} }, action) {\r\n//   switch (action.type) {\r\n//     case SENSOR_SAVE_REQUEST:\r\n//       return { loading: true,  sensor: {} };\r\n//     case SENSOR_SAVE_SUCCESS:\r\n//       return { loading: false,sucess: true, sensor: action.payload };\r\n//     case SENSOR_SAVE_ERROR:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\n// function SensorAlertListReducer(state = { alerts: [] }, action) {\r\n//   switch (action.type) {\r\n//     case SENSOR_ALERT_REQUEST:\r\n//       return { loading: true, alerts: [] };\r\n//     case  SENSOR_ALERT_SUCCESS:\r\n//       return { loading: false, sucess: true ,alerts: action.payload };\r\n//     case SENSOR_ALERT_ERROR:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\n// function SensorDetailReducer(state = { sensor: {} }, action) {\r\n//   switch (action.type) {\r\n//     case SENSOR_DETAILS_REQUEST:\r\n//       return { loading: true };\r\n//     case SENSOR_DETAILS_SUCESS:\r\n//       return { loading: false, sensor: action.payload };\r\n//     case SENSOR_DETAILS_FAIL:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\n// function SensorDeleteReducer(state = { sensor: {} }, action) {\r\n//   switch (action.type) {\r\n//     case SENSOR_DELETE_REQUEST:\r\n//       return { loading: true };\r\n//     case SENSOR_DELETE_SUCESS:\r\n//       return { loading: false, sucess: true, sensor: action.payload };\r\n//     case SENSOR_DELETE_FAIL:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\nexport { SensorListReducer};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport store from \"./store/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n    \r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}
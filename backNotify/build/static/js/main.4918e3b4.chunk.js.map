{"version":3,"sources":["api/api.js","screens/main.js","Actions/SensorListActions.js","Constants/SensorContants.js","routes.js","App.js","store/store.js","Reducers/SensorListReducer.js","index.js"],"names":["api","axios","create","baseURL","Main","props","useState","medicao","setMedicao","local","setItems","ShowEdit","setShowEdit","IDAlert","setIDAlert","idSensor","setIdSensor","nameSensor","setNameSensor","valueSensor","setValueSensor","PositionSensor","setPositionSensor","unitSensor","setUnitSensor","condSensor","setCondSensor","TimeSensor","setTimeSensor","DestSensor","setDestSensor","NameUnit","setNameUnit","searchKeyword","setSearchKeyword","SensorList","useSelector","state","sensorList","sensors","dispatch","loading","error","useDispatch","e","a","get","target","value","data","json","JSON","stringify","parse","values","map","item","TYPE","ID","NAME","UNIT","ShowEditForm","ListOneSensorEdit","ID_SENSOR","VALUE","COND","TIME","EMAIL","POSITION","searchSubmit","preventDefault","then","useEffect","type","payload","message","getValues","className","id","onSubmit","obj","Number","put","catch","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","_","htmlFor","disabled","onChange","selectedIndex","selectedOptions","title","required","i","key","placeholder","min","max","onClick","post","success","response","console","log","length","defaultValue","selected","pattern","size","toLowerCase","MEDITION","moment","created_at","format","toLocaleLowerCase","href","color","window","confirm","delete","Routes","path","component","MainScreen","exact","App","reducer","combineReducers","action","composeEnnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4918e3b4.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst api=axios.create({\r\n    baseURL:\"http://localhost:81\"\r\n})\r\n\r\nexport default api","import React, { useState, useEffect } from \"react\";\r\nimport { FaPen, FaTrash } from \"react-icons/fa\";\r\nimport { AiFillAlert, AiFillFrown, AiOutlineSearch } from \"react-icons/ai\";\r\nimport api from \"../api/api\";\r\n\r\nimport axios from 'axios'\r\n// import moment from \"moment\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as moment from \"moment-timezone\";\r\n\r\nimport \"./style.css\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { listSensor } from \"../Actions/SensorListActions\";\r\n\r\nfunction Main(props) {\r\n  const [medicao, setMedicao] = useState([]);\r\n  const [local, setItems] = useState([]);\r\n  const [ShowEdit, setShowEdit] = useState(false);\r\n  const [IDAlert, setIDAlert] = useState(0);\r\n  const [idSensor, setIdSensor] = useState(0);\r\n  const [nameSensor, setNameSensor] = useState(\"\");\r\n  const [valueSensor, setValueSensor] = useState(0);\r\n  const [PositionSensor, setPositionSensor] = useState(0);\r\n  const [unitSensor, setUnitSensor] = useState(\"\");\r\n  const [condSensor, setCondSensor] = useState(\"\");\r\n  const [TimeSensor, setTimeSensor] = useState(0);\r\n  const [DestSensor, setDestSensor] = useState(\"\");\r\n  const [NameUnit, setNameUnit] = useState(\"\");\r\n\r\n  const [searchKeyword, setSearchKeyword] = useState(\"\");\r\n\r\n  // Pego a o meu estado\r\n  const SensorList = useSelector((state) => state.sensorList);\r\n  // Listando todos os sensores que estão no banco\r\n  const { sensors, loading, error } = SensorList;\r\n\r\n  // Disparador de actions\r\n  const dispatch = useDispatch();\r\n\r\n  // Carrega todo o valores quando eu reiniciar o estado\r\n  useEffect(() => {\r\n    dispatch(listSensor());\r\n  }, []);\r\n\r\n  // Quando iniciar a aplicação irá carregar todos os valores do banco\r\n  useEffect(() => {\r\n    async function getValues() {\r\n      const { data } = await api.get(\"notify-sensors-alert\");\r\n      setItems(data.data);\r\n    }\r\n    getValues();\r\n  }, []);\r\n\r\n  // Extrai as medições do sensor específico\r\n  async function ListOneSensor(e) {\r\n    const data = await api.get(`notify-get-sensors/${e.target.value}`);\r\n    const json = JSON.stringify(data.data);\r\n    const medicao = JSON.parse(json);\r\n\r\n    const values = medicao.map((item) => item.TYPE);\r\n    setMedicao(values);\r\n    setIdSensor(data.data[0].ID);\r\n    setNameSensor(data.data[0].NAME);\r\n    setNameUnit(data.data[0].UNIT);\r\n    setUnitSensor(\"\");\r\n  }\r\n\r\n  async function ListOneSensorEdit(e) {\r\n    const data = await api.get(`notify-get-sensors/${e}`);\r\n    const json = JSON.stringify(data.data);\r\n    const medicao = JSON.parse(json);\r\n    const values = medicao.map((item) => item.TYPE);\r\n    setMedicao(values);\r\n    setIdSensor(data.data[0].ID);\r\n    setNameSensor(data.data[0].NAME);\r\n    setNameUnit(data.data[0].UNIT);\r\n  }\r\n\r\n  // POST\r\n  function submitHandle(e) {\r\n    e.preventDefault();\r\n\r\n    let obj = {\r\n      ID_SENSOR: idSensor,\r\n      VALUE: Number(valueSensor),\r\n      NAME: nameSensor,\r\n      POSITION: Number(PositionSensor),\r\n      UNIT: unitSensor,\r\n      COND: condSensor,\r\n      TIME: Number(TimeSensor),\r\n      EMAIL: DestSensor,\r\n    };\r\n    // console.log('OBJ ',obj)\r\n    api\r\n      .post(\"notify-post-sensor-alert\", obj)\r\n      .then((data) => {\r\n        setItems(data.data.data);\r\n      })\r\n      .then((_) => {\r\n        toast.success(`Alarme criado com sucesso!`, {\r\n          position: \"top-left\",\r\n          autoClose: 2000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: false,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n\r\n        setMedicao([]);\r\n        setIdSensor(0);\r\n        setNameSensor(\"\");\r\n        setValueSensor(0);\r\n        setUnitSensor(\"\");\r\n        setCondSensor(\"\");\r\n        setTimeSensor(0);\r\n        setPositionSensor(0);\r\n        setDestSensor(\"\");\r\n        setShowEdit(false);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(`${error.response.data}`, {\r\n          position: \"top-left\",\r\n          autoClose: 3000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: false,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n\r\n        console.log('ERROR= ',error.response.data)\r\n      });\r\n  }\r\n  // PUT\r\n  function submitHandlePUT(e) {\r\n    e.preventDefault();\r\n\r\n    let obj = {\r\n      ID_SENSOR: idSensor,\r\n      VALUE: Number(valueSensor),\r\n      NAME: nameSensor,\r\n      POSITION: Number(PositionSensor),\r\n      UNIT: unitSensor,\r\n      COND: condSensor,\r\n      TIME: Number(TimeSensor),\r\n      EMAIL: DestSensor,\r\n    };\r\n\r\n    api\r\n      .put(`/notify-put-sensor-alert/${IDAlert}`, obj)\r\n      .then((data) => {\r\n\r\n        \r\n\r\n        return setItems(data.data.data);\r\n      })\r\n      .catch(error=>{\r\n        toast.error(\"Opa colega, deu error aí\", {\r\n          position: \"top-left\",\r\n          autoClose: 2000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: false,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n      })\r\n      .then((_) => {\r\n        setMedicao([]);\r\n        setIdSensor(0);\r\n        setNameSensor(\"\");\r\n        setValueSensor(0);\r\n        setUnitSensor(\"\");\r\n        setCondSensor(\"0\");\r\n        setTimeSensor(0);\r\n        // setPositionSensor(0);\r\n        setDestSensor(\"\");\r\n        setShowEdit(false);\r\n      });\r\n  }\r\n  // DELETE\r\n  function handleDelete(id) {\r\n    if (window.confirm(\"Tem certeza que deseja deletar o alarme?\")) {\r\n      api\r\n        .delete(`notify-delete-sensor-alert/${id}`)\r\n        .then((data) => {\r\n          toast.success(`Alarme deletado com sucesso!`, {\r\n            position: \"top-left\",\r\n            autoClose: 2000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: false,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n          setItems(data.data.data);\r\n        })\r\n        .then((_) => {\r\n          setMedicao([]);\r\n          setIdSensor(0);\r\n          setNameSensor(\"\");\r\n          setValueSensor(0);\r\n          setUnitSensor(\"\");\r\n          setCondSensor(\"0\");\r\n          setTimeSensor(0);\r\n          // setPositionSensor(0);\r\n          setDestSensor(\"\");\r\n          setShowEdit(false);\r\n        });\r\n    }\r\n    // setItems(local);\r\n  }\r\n  \r\n  // Mostrar o Formulário de edição\r\n  function ShowEditForm(data) {\r\n    setMedicao([]);\r\n    setIdSensor(0);\r\n    setNameSensor(\"\");\r\n    setValueSensor(0);\r\n    setUnitSensor(\"\");\r\n    setCondSensor(\"0\");\r\n    setTimeSensor(0);\r\n    setPositionSensor(\"\");\r\n    setDestSensor(\"\");\r\n    setShowEdit(true);\r\n    \r\n    ListOneSensorEdit(data.ID_SENSOR);\r\n    setNameSensor(data.NAME);\r\n    setValueSensor(data.VALUE);\r\n    setCondSensor(data.COND);\r\n    setTimeSensor(data.TIME / 60);\r\n    setIDAlert(data.ID);\r\n    setDestSensor(data.EMAIL);\r\n    setUnitSensor(data.UNIT);\r\n    setPositionSensor(data.POSITION);\r\n\r\n\r\n  }\r\n  // Ocultar o Formulário de edição\r\n  function hideEditForm() {\r\n    setMedicao([]);\r\n    setIdSensor(0);\r\n    setNameSensor(\"\");\r\n    setValueSensor(0);\r\n    setUnitSensor(\"\");\r\n    setCondSensor(\"0\");\r\n    setTimeSensor(0);\r\n    setPositionSensor(0);\r\n    setDestSensor(\"\");\r\n    setShowEdit(false);\r\n  }\r\n  \r\n  function searchSubmit(e) {\r\n    e.preventDefault();\r\n    api\r\n    .get(`/search?name=${searchKeyword}`)\r\n    .then((data) => setItems(data.data));\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <main>\r\n        <div className=\"monitSelect\" id=\"form\">\r\n          {ShowEdit ? (\r\n            <form onSubmit={submitHandlePUT}>\r\n              <fieldset>\r\n                <h1 id=\"titleForm\">Editar Alarme</h1>\r\n                <br />\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectModel\">Nome do sensor:</label>\r\n                  <input type=\"text\" value={nameSensor} disabled></input>\r\n                </div>\r\n\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectMeasures\">Medição:</label>\r\n                  <select\r\n                    id=\"selectMeasures\"\r\n                    onChange={(e) => {\r\n                      setPositionSensor(e.target.selectedIndex);\r\n                      setUnitSensor(e.target.selectedOptions[0].id);\r\n                    }}\r\n                    value={PositionSensor > 0 ? PositionSensor - 1 : 0}\r\n                    title=\"Medida do sensor\"\r\n                    required\r\n                  >\r\n                    {medicao.map((item) =>\r\n                      item.map((e, i) => (\r\n                        <option\r\n                          value={i}\r\n                          key={i}\r\n                          data={e.UNIT}\r\n                          id={NameUnit[i]}\r\n                        >\r\n                          {e}\r\n                        </option>\r\n                      ))\r\n                      )}\r\n                  </select>\r\n                </div>\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectUnit\">\r\n                    Valor: {NameUnit[PositionSensor]}\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    // min={0}\r\n                    id=\"ValueInput\"\r\n                    value={valueSensor}\r\n                    onChange={(e) => setValueSensor(e.target.value)}\r\n                    required\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"condition\">Condição:</label>\r\n                  <select\r\n                    onChange={(e) => {\r\n                      setCondSensor(e.target.value);\r\n                    }}\r\n                    title=\"Condição para alarmar\"\r\n                    value={condSensor}\r\n                    required\r\n                  >\r\n                    <option value=\"ACIMA\">Acima</option>\r\n                    <option value=\"ABAIXO\">Abaixo</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectTime\" title=\"Tempo em minutos\">\r\n                    Tempo (min):\r\n                  </label>\r\n                  <input\r\n                    id=\"selectTime\"\r\n                    type=\"number\"\r\n                    value={TimeSensor}\r\n                    placeholder=\"Selecione o tempo\"\r\n                    min={0}\r\n                    max={59}\r\n                    onChange={(e) => setTimeSensor(e.target.value)}\r\n                    required\r\n                  ></input>\r\n                </div>\r\n\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectDest\" title=\"Destinatário\">\r\n                    Destinatário:\r\n                  </label>\r\n                  <input\r\n                    id=\"selectDest\"\r\n                    type=\"email\"\r\n                    value={DestSensor}\r\n                    placeholder=\"Selecione o destinatário\"\r\n                    onChange={(e) => setDestSensor(e.target.value)}\r\n                    required\r\n                  ></input>\r\n                </div>\r\n                <div className=\"buttons-container\">\r\n                  <button type=\"submit\">Atualizar alerta</button>\r\n                  <button type=\"button\" onClick={(_) => hideEditForm()}>\r\n                    Voltar\r\n                  </button>\r\n                </div>\r\n              </fieldset>\r\n            </form>\r\n          ) : (\r\n            <form onSubmit={submitHandle}>\r\n              <fieldset>\r\n                <h1 id=\"titleForm\">Criar Alarme</h1>\r\n                <br />\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectModel\">Nome do sensor:</label>\r\n                  <select\r\n                    id=\"selectModel\"\r\n                    onChange={ListOneSensor}\r\n                    value={nameSensor ? idSensor : \"1\"}\r\n                    required\r\n                    title=\"Nome do sensor\"\r\n                  >\r\n                    <option value=\"1\" disabled>\r\n                      Selecione\r\n                    </option>\r\n                    {sensors.map((e, i) => (\r\n                      <option value={e.ID} key={i}>\r\n                        {e.NAME}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectMeasures\">Medição:</label>\r\n                  <select\r\n                    id=\"selectMeasures\"\r\n                    disabled={medicao.length === 0 ? true : false}\r\n                    onChange={(e) => {\r\n                      setPositionSensor(e.target.value);\r\n                      setUnitSensor(e.target.selectedOptions[0].id);\r\n                    }}\r\n                    defaultValue={unitSensor}\r\n                    title=\"Medida do sensor\"\r\n                    required\r\n                  >\r\n                    <option value=\"\" selected>\r\n                      Selecione\r\n                    </option>\r\n                    {medicao.map((item) =>\r\n                      item.map((e, i) => (\r\n                        <option\r\n                        value={`${i}`}\r\n                          key={i}\r\n                          id={NameUnit[i]}\r\n                          required\r\n                        >\r\n                          {e}\r\n                        </option>\r\n                      ))\r\n                      )}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectUnit\">\r\n                    Valor: {unitSensor === \"1\" ? \"\" : unitSensor}\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    min={0}\r\n                    id=\"ValueInput\"\r\n                    onChange={(e) => setValueSensor(e.target.value)}\r\n                    value={valueSensor}\r\n                    disabled={medicao.length === 0 ? true : false}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"condition\">Condição:</label>\r\n                  <select\r\n                    disabled={medicao.length === 0 ? true : false}\r\n                    onChange={(e) => {\r\n                      setCondSensor(e.target.value);\r\n                    }}\r\n                    title=\"Condição para alarmar\"\r\n                    value={!condSensor ? \"0\" : condSensor}\r\n                    required\r\n                  >\r\n                    <option value=\"0\" disabled>\r\n                      Selecione\r\n                    </option>\r\n                    <option value=\"ACIMA\">Acima</option>\r\n                    <option value=\"ABAIXO\">Abaixo</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectTime\" title=\"Tempo em minutos\">\r\n                    Tempo (min):\r\n                  </label>\r\n                  <input\r\n                    id=\"selectTime\"\r\n                    type=\"number\"\r\n                    placeholder=\"Selecione o tempo\"\r\n                    value={TimeSensor}\r\n                    min={0}\r\n                    max={59}\r\n                    disabled={medicao.length === 0 ? true : false}\r\n                    onChange={(e) => setTimeSensor(e.target.value)}\r\n                    required\r\n                  ></input>\r\n                </div>\r\n\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectDest\" title=\"Destinatário\">\r\n                    Destinatário:\r\n                  </label>\r\n                  <input\r\n                    id=\"selectDest\"\r\n                    type=\"email\"\r\n                    value={DestSensor}\r\n                    placeholder=\"Selecione o destinatário\"\r\n                    pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\r\n                    disabled={medicao.length === 0 ? true : false}\r\n                    onChange={(e) => setDestSensor(e.target.value)}\r\n                    required\r\n                  ></input>\r\n                </div>\r\n                <div className=\"buttons-container\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    disabled={medicao.length === 0 ? true : false}\r\n                  >\r\n                    Criar Alerta\r\n                  </button>\r\n                </div>\r\n              </fieldset>\r\n            </form>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"cards-container\">\r\n          <form onSubmit={searchSubmit} className=\"search-input-container\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Pesquisar alerta\"\r\n              value={searchKeyword}\r\n              onChange={(e) => setSearchKeyword(e.target.value)}\r\n            />\r\n            {/* <button type=\"submit\">S</button> */}\r\n            <p onClick={searchSubmit}>\r\n              <AiOutlineSearch size={24} />\r\n            </p>\r\n          </form>\r\n          <div className=\"mySchedule\">\r\n            <ul className=\"list-cards\">\r\n              {local && local.length !== 0 ? (\r\n                local.map((e, i) => (\r\n                  <li className=\"card\" key={e.ID}>\r\n                    <div className=\"head-card\">\r\n                      <h1>{e.NAME}</h1>\r\n                    </div>\r\n                    <div className=\"content-card\">\r\n                      <p>\r\n                        Condição: {e.COND.toLowerCase()} de {e.VALUE} {e.UNIT}{\" \"}\r\n                        {e.MEDITION}\r\n                      </p>\r\n                      <p>Tempo para enviar alerta: {e.TIME / 60} min</p>\r\n                    </div>\r\n                    <div id=\"footer-Container\">\r\n                      <p className=\"date-detail\">\r\n                        Alerta criado em{\" \"}\r\n                        {moment\r\n                          .tz(e.created_at, \"America/Fortaleza\")\r\n                          .format(\"DD/MM/YYYY  HH:mm:ss\")\r\n                          .toLocaleLowerCase(\"pt-br\")}\r\n                      </p>\r\n\r\n                      <div id=\"buttons-Container\">\r\n                        <a\r\n                          href=\"#form\"\r\n                          className=\"edit-button\"\r\n                          onClick={() => ShowEditForm(e)}\r\n                        >\r\n                          <FaPen color=\"white\" />\r\n                        </a>\r\n                        <button\r\n                          className=\"delete-button\"\r\n                          onClick={(_) => handleDelete(e.ID)}\r\n                        >\r\n                          <FaTrash color=\"white\" />\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </li>\r\n                ))\r\n              ) : (\r\n                <div id=\"not-found\">\r\n                  {\" \"}\r\n                  <AiFillFrown size={60} /> Nenhum alerta registrado\r\n                </div>\r\n              )}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import api from \"../api/api\";\r\nimport axios from 'axios'\r\nimport {\r\n  SENSOR_LIST_SUCESS,\r\n  SENSOR_LIST_FAIL,\r\n  SENSOR_LIST_REQUEST,\r\n} from \"../Constants/SensorContants\";\r\n\r\nconst listSensor = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: SENSOR_LIST_REQUEST });\r\n    const { data } = await api.get(\"notify-get-sensors\");\r\n    dispatch({ type: SENSOR_LIST_SUCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: SENSOR_LIST_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\n// const listSensorAlert = () => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: SENSOR_ALERT_REQUEST });\r\n//     const { data } = await api.get(\"sensors-alert\");\r\n//     dispatch({ type: SENSOR_ALERT_SUCCESS, payload: data });\r\n//   } catch (error) {\r\n//     dispatch({ type: SENSOR_ALERT_ERROR, payload: error.message });\r\n//   }\r\n// };\r\n\r\n// const listOneSensor = (id) => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: SENSOR_DETAILS_REQUEST });\r\n//     const { data } = await api.get(`get-sensor-monitoring/${id}`);\r\n//     console.log('LIST ONE SENSOR= ',data[0])\r\n//     dispatch({ type: SENSOR_DETAILS_SUCESS, payload: data[0] });\r\n//   } catch (error) {\r\n//     dispatch({ type: SENSOR_DETAILS_FAIL, payload: error.message });\r\n//   }\r\n// };\r\n\r\n// const productsDetails = (ProductID) => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: SENSOR_DETAILS_REQUEST, payload: ProductID });\r\n//     const sensor = await api.get(`get-sensor-monitoring/${SensorID}`);\r\n//     dispatch({ type: SENSOR_DETAILS_SUCESS, payload: sensor.data });\r\n//   } catch (error) {\r\n//     dispatch({ type: SENSOR_DETAILS_FAIL, payload: error.message });\r\n//   }\r\n// };\r\n\r\n// const Delete = (id) => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: SENSOR_DELETE_REQUEST});\r\n//     const {data} = await api.delete(`/delete-sensor-alert/${id}`);\r\n//     // console.log(\"DATA DELETE\",product)\r\n//     dispatch({ type: SENSOR_DELETE_SUCESS, payload: data,sucess:true});\r\n//   } catch (error) {\r\n//     dispatch({ type: SENSOR_DELETE_FAIL, payload: error.message});\r\n//   }\r\n// };\r\n\r\n// const Save = (obj) => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: SENSOR_SAVE_REQUEST});\r\n//     const data = await api.post(\"post-sensor-alert\", obj);\r\n//     // console.log(\"DATA DELETE\",product)\r\n//     dispatch({ type: SENSOR_SAVE_SUCCESS, payload: data,sucess:true});\r\n//   } catch (error) {\r\n//     dispatch({ type: SENSOR_SAVE_ERROR, payload: error.message});\r\n//   }\r\n// };\r\n\r\n\r\nexport { listSensor};","const SENSOR_LIST_REQUEST = \"SENSOR_LIST_REQUEST\";\r\nconst SENSOR_LIST_SUCESS = \"SENSOR_LIST_SUCESS\";\r\nconst SENSOR_LIST_FAIL = \"SENSOR_LIST_FAIL\";\r\n\r\nconst SENSOR_DETAILS_REQUEST = \"SENSOR_DETAILS_REQUEST\";\r\nconst SENSOR_DETAILS_SUCESS = \"SENSORDETAILST_SUCESS\";\r\nconst SENSOR_DETAILS_FAIL = \"SENSOR_DETAILS_FAIL\";\r\n\r\nconst SENSOR_DELETE_REQUEST = \"SENSOR_DELETE_REQUEST\";\r\nconst SENSOR_DELETE_SUCESS = \"SENSOR_DELETE_SUCESS\";\r\nconst SENSOR_DELETE_FAIL = \"SENSOR_DELETE_FAIL\";\r\n\r\nconst SENSOR_ALERT_REQUEST = \"SENSOR_ALERT_REQUEST\";\r\nconst SENSOR_ALERT_SUCCESS = \"SENSOR_ALERT_SUCCESS\";\r\nconst SENSOR_ALERT_ERROR = \"SENSOR_ALERT_ERROR\";\r\n\r\nconst SENSOR_SAVE_REQUEST = \"SENSOR_SAVE_REQUEST\";\r\nconst SENSOR_SAVE_SUCCESS = \"SENSOR_SAVE_SUCCESS\";\r\nconst SENSOR_SAVE_ERROR = \"SENSOR_SAVE_ERROR\";\r\n\r\n\r\nexport {\r\n  SENSOR_LIST_FAIL,\r\n  SENSOR_LIST_SUCESS,\r\n  SENSOR_LIST_REQUEST,\r\n  SENSOR_DETAILS_FAIL,\r\n  SENSOR_DETAILS_REQUEST,\r\n  SENSOR_DETAILS_SUCESS,\r\n  SENSOR_DELETE_FAIL,\r\n  SENSOR_DELETE_REQUEST,\r\n  SENSOR_DELETE_SUCESS,\r\n  SENSOR_ALERT_REQUEST,\r\n  SENSOR_ALERT_SUCCESS,\r\n  SENSOR_ALERT_ERROR,\r\n  SENSOR_SAVE_SUCCESS,\r\n  SENSOR_SAVE_ERROR,\r\n  SENSOR_SAVE_REQUEST\r\n};","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nimport MainScreen from \"./screens/main\";\r\n\r\n\r\nfunction Routes() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/\" component={MainScreen} exact/>\r\n        {/* <Route path=\"/Edit/:id\" component={EditScreen}/> */}\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\n\r\nimport \"./Global.css\";\r\nimport Route from \"./routes\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Route />\r\n      <ToastContainer autoClose={2000}>\r\n        position=\"top-right\" \r\n        autoClose={2000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick rtl={false}\r\n        pauseOnFocusLoss \r\n        draggable \r\n        pauseOnHover\r\n      </ToastContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createStore, combineReducers, compose, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {\r\n  SensorListReducer,\r\n} from \"../Reducers/SensorListReducer\";\r\nconst initialState = {};\r\n\r\nconst reducer = combineReducers({\r\n  sensorList: SensorListReducer,\r\n  // sensorDetail:SensorDetailReducer,\r\n  // SensorDelete: SensorDeleteReducer,\r\n  // SensorAlertList:SensorAlertListReducer,\r\n  // SensorSave: SensorSaveReducer\r\n});\r\nconst composeEnnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  initialState,\r\n  composeEnnhancer(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store","// Constantes usadas para evitar erros de digitações\r\nimport {\r\n  SENSOR_LIST_FAIL,\r\n  SENSOR_LIST_REQUEST,\r\n  SENSOR_LIST_SUCESS,\r\n} from \"../Constants/SensorContants\";\r\n\r\n// Reducar irá possuir um estado inicial e recebe action\r\nfunction SensorListReducer(state = { sensors: [] }, action) {\r\n  switch (action.type) {\r\n    case SENSOR_LIST_REQUEST:\r\n      return { loading: true, sensors: [] };\r\n    case SENSOR_LIST_SUCESS:\r\n      return { loading: false, sensors: action.payload };\r\n    case SENSOR_LIST_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// function SensorSaveReducer(state = {  sensor: {} }, action) {\r\n//   switch (action.type) {\r\n//     case SENSOR_SAVE_REQUEST:\r\n//       return { loading: true,  sensor: {} };\r\n//     case SENSOR_SAVE_SUCCESS:\r\n//       return { loading: false,sucess: true, sensor: action.payload };\r\n//     case SENSOR_SAVE_ERROR:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\n// function SensorAlertListReducer(state = { alerts: [] }, action) {\r\n//   switch (action.type) {\r\n//     case SENSOR_ALERT_REQUEST:\r\n//       return { loading: true, alerts: [] };\r\n//     case  SENSOR_ALERT_SUCCESS:\r\n//       return { loading: false, sucess: true ,alerts: action.payload };\r\n//     case SENSOR_ALERT_ERROR:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\n// function SensorDetailReducer(state = { sensor: {} }, action) {\r\n//   switch (action.type) {\r\n//     case SENSOR_DETAILS_REQUEST:\r\n//       return { loading: true };\r\n//     case SENSOR_DETAILS_SUCESS:\r\n//       return { loading: false, sensor: action.payload };\r\n//     case SENSOR_DETAILS_FAIL:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\n// function SensorDeleteReducer(state = { sensor: {} }, action) {\r\n//   switch (action.type) {\r\n//     case SENSOR_DELETE_REQUEST:\r\n//       return { loading: true };\r\n//     case SENSOR_DELETE_SUCESS:\r\n//       return { loading: false, sucess: true, sensor: action.payload };\r\n//     case SENSOR_DELETE_FAIL:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\nexport { SensorListReducer};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport store from \"./store/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n    \r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}
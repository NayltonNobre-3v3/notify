{"version":3,"sources":["screens/main.js","Actions/SensorListActions.js","Constants/SensorContants.js","routes.js","App.js","store/store.js","Reducers/SensorListReducer.js","index.js"],"names":["Main","useState","medicao","setMedicao","local","setItems","ShowEdit","setShowEdit","IDAlert","setIDAlert","idSensor","setIdSensor","nameSensor","setNameSensor","valueSensor","setValueSensor","PositionSensor","setPositionSensor","unitSensor","setUnitSensor","condSensor","setCondSensor","TimeSensor","setTimeSensor","DestSensor","setDestSensor","NameUnit","setNameUnit","SensorList","useSelector","state","sensorList","sensors","dispatch","loading","error","useDispatch","e","a","axios","get","target","value","data","json","JSON","stringify","parse","values","map","item","TYPE","ID","NAME","UNIT","ShowEditForm","ListOneSensorEdit","ID_SENSOR","VALUE","COND","TIME","EMAIL","POSITION","useEffect","type","payload","message","getValues","className","onSubmit","preventDefault","obj","Number","put","then","_","id","htmlFor","disabled","onChange","selectedIndex","selectedOptions","title","required","i","key","placeholder","min","max","onClick","console","log","post","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","catch","length","defaultValue","selected","pattern","toLowerCase","MEDITION","moment","created_at","locale","format","color","window","confirm","delete","size","Routes","path","component","MainScreen","exact","App","reducer","combineReducers","action","composeEnnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cbb8a563.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { FaPen, FaTrash } from \"react-icons/fa\";\r\nimport { AiFillAlert, AiFillFrown } from \"react-icons/ai\";\r\n// import api from \"../api/api\";\r\nimport axios from 'axios'\r\nimport moment from \"moment\";\r\nimport { toast} from \"react-toastify\";\r\n\r\n\r\nimport \"./style.css\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { listSensor } from \"../Actions/SensorListActions\";\r\n\r\nfunction Main() {\r\n  const [medicao, setMedicao] = useState([]);\r\n  const [local, setItems] = useState([]);\r\n  const [ShowEdit, setShowEdit] = useState(false);\r\n  const [IDAlert, setIDAlert] = useState(0);\r\n\r\n  const [idSensor, setIdSensor] = useState(0);\r\n  const [nameSensor, setNameSensor] = useState(\"\");\r\n  const [valueSensor, setValueSensor] = useState(0);\r\n  const [PositionSensor, setPositionSensor] = useState(0);\r\n  const [unitSensor, setUnitSensor] = useState(\"\");\r\n  const [condSensor, setCondSensor] = useState(\"\");\r\n  const [TimeSensor, setTimeSensor] = useState(0);\r\n  const [DestSensor, setDestSensor] = useState(\"\");\r\n  const [NameUnit, setNameUnit] = useState(\"\");\r\n\r\n\r\n  // Pego a o meu estado\r\n  const SensorList = useSelector((state) => state.sensorList);\r\n  // Listando todos os sensores que estão no banco\r\n  const { sensors, loading, error } = SensorList;\r\n\r\n  // Disparador de actions\r\n  const dispatch = useDispatch();\r\n\r\n  // Carrega todo o valores quando eu reiniciar o estado\r\n  useEffect(() => {\r\n    dispatch(listSensor());\r\n  }, []);\r\n\r\n  // Quando iniciar a aplicação irá carregar todos os valores do banco\r\n  useEffect(() => {\r\n    async function getValues() {\r\n      const { data } = await axios.get(\"notify-sensors-alert\");\r\n      setItems(data.data);\r\n    }\r\n    getValues();\r\n  }, []);\r\n\r\n  // Extrai as medições do sensor específico\r\n  async function ListOneSensor(e) {\r\n    const data = await axios.get(`notify-get-sensors/${e.target.value}`);\r\n    const json = JSON.stringify(data.data);\r\n    const medicao = JSON.parse(json);\r\n\r\n    const values = medicao.map((item) => item.TYPE);\r\n    setMedicao(values);\r\n    setIdSensor(data.data[0].ID);\r\n    setNameSensor(data.data[0].NAME);\r\n    setNameUnit(data.data[0].UNIT)\r\n    setUnitSensor('')\r\n\r\n\r\n  }\r\n\r\n  async function ListOneSensorEdit(e) {\r\n    const data = await axios.get(`notify-get-sensors/${e}`);\r\n    const json = JSON.stringify(data.data);\r\n    const medicao = JSON.parse(json);\r\n    const values = medicao.map((item) => item.TYPE);\r\n    setMedicao(values);\r\n    setIdSensor(data.data[0].ID);\r\n    setNameSensor(data.data[0].NAME);\r\n    setNameUnit(data.data[0].UNIT)\r\n  }\r\n\r\n  // POST\r\n  function submitHandle(e) {\r\n    e.preventDefault();\r\n\r\n    let obj = {\r\n      ID_SENSOR: idSensor,\r\n      VALUE: Number(valueSensor),\r\n      NAME: nameSensor,\r\n      POSITION: Number(PositionSensor),\r\n      UNIT: unitSensor,\r\n      COND: condSensor,\r\n      TIME: Number(TimeSensor),\r\n      EMAIL: DestSensor,\r\n    };\r\n    console.log('OBJ ',obj)\r\n    axios.post(\"notify-post-sensor-alert\", obj)\r\n      .then(data => {\r\n        setItems(data.data.data)\r\n      })\r\n      .then(_ => {\r\n        toast.success(`Alarme criado com sucesso!`, {\r\n          position: \"top-left\",\r\n          autoClose: 3000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: false,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n        setMedicao([]);\r\n        setIdSensor(0);\r\n        setNameSensor(\"\");\r\n        setValueSensor(0);\r\n        setUnitSensor(\"\");\r\n        setCondSensor(\"\");\r\n        setTimeSensor(0);\r\n        setPositionSensor(0);\r\n        setDestSensor(\"\");\r\n        setShowEdit(false);\r\n      })\r\n      .catch(error => {\r\n        toast.error(\"Opa colega, deu error aí\", {\r\n          position: \"top-left\",\r\n          autoClose: 3000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: false,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n      })\r\n  }\r\n  // PUT\r\n  function submitHandlePUT(e) {\r\n    e.preventDefault();\r\n\r\n    let obj = {\r\n      ID_SENSOR: idSensor,\r\n      VALUE: Number(valueSensor),\r\n      NAME: nameSensor,\r\n      POSITION: Number(PositionSensor),\r\n      UNIT: unitSensor,\r\n      COND: condSensor,\r\n      TIME: Number(TimeSensor),\r\n      EMAIL: DestSensor,\r\n    };\r\n\r\n    axios.put(`/notify-put-sensor-alert/${IDAlert}`, obj)\r\n      .then(data =>{\r\n        return setItems(data.data.data)\r\n      })\r\n      .then(_ => {\r\n        setMedicao([]);\r\n        setIdSensor(0);\r\n        setNameSensor(\"\");\r\n        setValueSensor(0);\r\n        setUnitSensor(\"\");\r\n        setCondSensor(\"0\");\r\n        setTimeSensor(0);\r\n        // setPositionSensor(0);\r\n        setDestSensor(\"\");\r\n        setShowEdit(false);\r\n      })\r\n\r\n  }\r\n  // DELETE\r\n  function handleDelete(id) {\r\n    if (window.confirm(\"Tem certeza que deseja deletar o alarme?\")) {\r\n      axios.delete(`notify-delete-sensor-alert/${id}`)\r\n        .then(data => {\r\n          setItems(data.data.data)\r\n        })\r\n        .then(_ => {\r\n          setMedicao([]);\r\n          setIdSensor(0);\r\n          setNameSensor(\"\");\r\n          setValueSensor(0);\r\n          setUnitSensor(\"\");\r\n          setCondSensor(\"0\");\r\n          setTimeSensor(0);\r\n          // setPositionSensor(0);\r\n          setDestSensor(\"\");\r\n          setShowEdit(false);\r\n        })\r\n    }\r\n    // setItems(local);\r\n  }\r\n\r\n  // Mostrar o Formulário de edição\r\n  function ShowEditForm(data) {\r\n    setMedicao([]);\r\n    setIdSensor(0);\r\n    setNameSensor(\"\");\r\n    setValueSensor(0);\r\n    setUnitSensor(\"\");\r\n    setCondSensor(\"0\");\r\n    setTimeSensor(0);\r\n    setPositionSensor('');\r\n    setDestSensor(\"\");\r\n    setShowEdit(true);\r\n\r\n\r\n    ListOneSensorEdit(data.ID_SENSOR);\r\n    setNameSensor(data.NAME)\r\n    setValueSensor(data.VALUE);\r\n    setCondSensor(data.COND);\r\n    setTimeSensor(data.TIME / 60);\r\n    setIDAlert(data.ID);\r\n    setDestSensor(data.EMAIL);\r\n    setUnitSensor(data.UNIT)\r\n    setPositionSensor(data.POSITION);\r\n  }\r\n  // Ocultar o Formulário de edição\r\n  function hideEditForm() {\r\n    setMedicao([]);\r\n    setIdSensor(0);\r\n    setNameSensor(\"\");\r\n    setValueSensor(0);\r\n    setUnitSensor(\"\");\r\n    setCondSensor(\"0\");\r\n    setTimeSensor(0);\r\n    setPositionSensor(0);\r\n    setDestSensor(\"\");\r\n    setShowEdit(false);\r\n  }\r\n \r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <main>\r\n        <div className=\"monitSelect\">\r\n          {ShowEdit ? (\r\n            <form onSubmit={submitHandlePUT}>\r\n              <fieldset>\r\n                <h1 id=\"titleForm\">Editar Alarme</h1>\r\n                <br />\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectModel\">Nome do sensor:</label>\r\n                  <input type=\"text\" value={nameSensor} disabled></input>\r\n                </div>\r\n\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectMeasures\">Medição:</label>\r\n                  <select\r\n                    id=\"selectMeasures\"\r\n                    onChange={(e) => {\r\n                      setPositionSensor(e.target.selectedIndex)\r\n                      setUnitSensor(e.target.selectedOptions[0].id)\r\n                    }}\r\n                    value={ PositionSensor>0?PositionSensor-1:0}\r\n                    title=\"Medida do sensor\"\r\n                    required\r\n                    >\r\n                    {medicao.map((item) =>\r\n                      item.map((e, i) => (\r\n                        <option value={i} key={i} data={e.UNIT} id={NameUnit[i]} >\r\n                          {e}\r\n                        </option>\r\n                      ))\r\n                    )}\r\n                  </select>\r\n                </div>\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectUnit\">Valor:  {NameUnit[PositionSensor]}</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    // min={0}\r\n                    id=\"ValueInput\"\r\n                    value={valueSensor}\r\n                    onChange={(e) => setValueSensor(e.target.value)}\r\n                    required\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"condition\">Condição:</label>\r\n                  <select\r\n                    onChange={(e) => {\r\n                      setCondSensor(e.target.value);\r\n                    }}\r\n                    title=\"Condição para alarmar\"\r\n                    value={condSensor}\r\n                    required\r\n                  >\r\n                    <option value=\"ACIMA\">Acima</option>\r\n                    <option value=\"ABAIXO\">Abaixo</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectTime\" title=\"Tempo em minutos\">\r\n                    Tempo (minutos):\r\n                  </label>\r\n                  <input\r\n                    id=\"selectTime\"\r\n                    type=\"number\"\r\n                    value={TimeSensor}\r\n                    placeholder=\"Selecione o tempo\"\r\n                    min={0}\r\n                    max={59}\r\n                    onChange={(e) => setTimeSensor(e.target.value)}\r\n                    required\r\n                  ></input>\r\n                </div>\r\n\r\n                <div className=\"input-group\">\r\n                  <label htmlFor=\"selectDest\" title=\"Destinatário\">\r\n                    Destinatário:\r\n                  </label>\r\n                  <input\r\n                    id=\"selectDest\"\r\n                    type=\"email\"\r\n                    value={DestSensor}\r\n                    placeholder=\"Selecione o destinatário\"\r\n                    onChange={(e) => setDestSensor(e.target.value)}\r\n                    required\r\n                  ></input>\r\n                </div>\r\n                <div className=\"buttons-container\">\r\n                  <button type=\"submit\">Atualizar alerta</button>\r\n                  <button type=\"button\" onClick={(_) => hideEditForm()}>\r\n                    Voltar\r\n                  </button>\r\n                </div>\r\n              </fieldset>\r\n            </form>\r\n          ) : (\r\n              <form onSubmit={submitHandle}>\r\n                <fieldset>\r\n                  <h1 id=\"titleForm\">Criar Alarme</h1>\r\n                  <br />\r\n                  <div className=\"input-group\">\r\n                    <label htmlFor=\"selectModel\">Nome do sensor:</label>\r\n                    <select\r\n                      id=\"selectModel\"\r\n                      onChange={ListOneSensor}\r\n                      value={nameSensor ? idSensor : \"1\"}\r\n\r\n                      required\r\n                      title=\"Nome do sensor\"\r\n                    >\r\n                      <option value=\"1\" disabled>\r\n                        Selecione\r\n                    </option>\r\n                      {sensors.map((e, i) => (\r\n                        <option value={e.ID} key={i}>\r\n                          {e.NAME}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div className=\"input-group\">\r\n                    <label htmlFor=\"selectMeasures\">Medição:</label>\r\n                    <select\r\n                      id=\"selectMeasures\"\r\n                      disabled={medicao.length === 0 ? true : false}\r\n                      onChange={(e) => {\r\n                        setPositionSensor(e.target.value)\r\n                        setUnitSensor(e.target.selectedOptions[0].id)\r\n                      }}\r\n                      defaultValue={unitSensor}\r\n                      title=\"Medida do sensor\"\r\n                      required\r\n                    >\r\n                      <option value=\"\"  selected>\r\n                        Selecione\r\n                    </option>\r\n                      {medicao.map((item) =>\r\n                        item.map((e, i) => (\r\n                          <option value={`${i}`} key={i} id={NameUnit[i]} required>\r\n                            {e}\r\n                          </option>\r\n                        ))\r\n                      )}\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div className=\"input-group\">\r\n                    <label htmlFor=\"selectUnit\">Valor: {unitSensor==='1'?'':unitSensor}</label>\r\n                    <input\r\n                      type=\"number\"\r\n                      min={0}\r\n                      id=\"ValueInput\"\r\n                      onChange={(e) => setValueSensor(e.target.value)}\r\n                      value={valueSensor}\r\n                      disabled={medicao.length === 0 ? true : false}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"input-group\">\r\n                    <label htmlFor=\"condition\">Condição:</label>\r\n                    <select\r\n                      disabled={medicao.length === 0 ? true : false}\r\n                      onChange={(e) => {\r\n                        setCondSensor(e.target.value);\r\n                      }}\r\n                      title=\"Condição para alarmar\"\r\n                      value={!condSensor ? \"0\" : condSensor}\r\n                      required\r\n                    >\r\n                      <option value=\"0\" disabled>\r\n                        Selecione\r\n                    </option>\r\n                      <option value=\"ACIMA\">Acima</option>\r\n                      <option value=\"ABAIXO\">Abaixo</option>\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div className=\"input-group\">\r\n                    <label htmlFor=\"selectTime\" title=\"Tempo em minutos\">\r\n                      Tempo (minutos):\r\n                  </label>\r\n                    <input\r\n                      id=\"selectTime\"\r\n                      type=\"number\"\r\n                      value={TimeSensor}\r\n                      placeholder=\"Selecione o tempo\"\r\n                      min={0}\r\n                      max={59}\r\n                      disabled={medicao.length === 0 ? true : false}\r\n                      onChange={(e) => setTimeSensor(e.target.value)}\r\n                      required\r\n                    ></input>\r\n                  </div>\r\n\r\n                  <div className=\"input-group\">\r\n                    <label htmlFor=\"selectDest\" title=\"Destinatário\">\r\n                      Destinatário:\r\n                  </label>\r\n                    <input\r\n                      id=\"selectDest\"\r\n                      type=\"email\"\r\n                      value={DestSensor}\r\n                      placeholder=\"Selecione o destinatário\"\r\n                      pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\r\n                      disabled={medicao.length === 0 ? true : false}\r\n                      onChange={(e) => setDestSensor(e.target.value)}\r\n                      required\r\n                    ></input>\r\n                  </div>\r\n                  <div className=\"buttons-container\">\r\n                    <button\r\n                      type=\"submit\"\r\n                      disabled={medicao.length === 0 ? true : false}\r\n                    >\r\n                      Criar Alerta\r\n                  </button>\r\n                  </div>\r\n                </fieldset>\r\n              </form>\r\n            )}\r\n        </div>\r\n\r\n        <div className=\"mySchedule\">\r\n          <ul className=\"list-cards\">\r\n            {local && local.length !== 0 ? (\r\n              local.map((e, i) => (\r\n                <li className=\"card\" key={e.ID}>\r\n                  <div className=\"head-card\">\r\n                    <h1>{e.NAME}</h1>\r\n                  </div>\r\n                  <div className=\"content-card\">\r\n                    <p>\r\n                      Condição: {e.COND.toLowerCase()} de {e.VALUE} {e.UNIT} {e.MEDITION}\r\n                    </p>\r\n                    <p>Tempo para enviar alerta: {e.TIME / 60} min</p>\r\n                  </div>\r\n                  <div id=\"footer-Container\">\r\n                    <p className=\"date-detail\">\r\n                      Alerta criado em {moment(e.created_at).locale('pt-br').format('MM/DD/YYYY  h:mm:ss')}\r\n                    </p>\r\n\r\n                    <div id=\"buttons-Container\">\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"edit-button\"\r\n                        onClick={() => ShowEditForm(e)}\r\n                      >\r\n                        <FaPen color=\"white\" />\r\n                      </button>\r\n                      <button\r\n                        className=\"delete-button\"\r\n                        onClick={(_) => handleDelete(e.ID)}\r\n                      >\r\n                        <FaTrash color=\"white\" />\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </li>\r\n              ))\r\n            ) : (\r\n                <div id=\"not-found\">\r\n                  {\" \"}\r\n                  <AiFillFrown size={60} /> Nenhum alerta registrado\r\n                </div>\r\n              )}\r\n          </ul>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;","// import api from \"../api/api\";\r\nimport axios from 'axios'\r\nimport {\r\n  SENSOR_LIST_SUCESS,\r\n  SENSOR_LIST_FAIL,\r\n  SENSOR_LIST_REQUEST,\r\n} from \"../Constants/SensorContants\";\r\n\r\nconst listSensor = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: SENSOR_LIST_REQUEST });\r\n    const { data } = await axios.get(\"notify-get-sensors\");\r\n    dispatch({ type: SENSOR_LIST_SUCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: SENSOR_LIST_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\n// const listSensorAlert = () => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: SENSOR_ALERT_REQUEST });\r\n//     const { data } = await api.get(\"sensors-alert\");\r\n//     dispatch({ type: SENSOR_ALERT_SUCCESS, payload: data });\r\n//   } catch (error) {\r\n//     dispatch({ type: SENSOR_ALERT_ERROR, payload: error.message });\r\n//   }\r\n// };\r\n\r\n// const listOneSensor = (id) => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: SENSOR_DETAILS_REQUEST });\r\n//     const { data } = await api.get(`get-sensor-monitoring/${id}`);\r\n//     console.log('LIST ONE SENSOR= ',data[0])\r\n//     dispatch({ type: SENSOR_DETAILS_SUCESS, payload: data[0] });\r\n//   } catch (error) {\r\n//     dispatch({ type: SENSOR_DETAILS_FAIL, payload: error.message });\r\n//   }\r\n// };\r\n\r\n// const productsDetails = (ProductID) => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: SENSOR_DETAILS_REQUEST, payload: ProductID });\r\n//     const sensor = await api.get(`get-sensor-monitoring/${SensorID}`);\r\n//     dispatch({ type: SENSOR_DETAILS_SUCESS, payload: sensor.data });\r\n//   } catch (error) {\r\n//     dispatch({ type: SENSOR_DETAILS_FAIL, payload: error.message });\r\n//   }\r\n// };\r\n\r\n// const Delete = (id) => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: SENSOR_DELETE_REQUEST});\r\n//     const {data} = await api.delete(`/delete-sensor-alert/${id}`);\r\n//     // console.log(\"DATA DELETE\",product)\r\n//     dispatch({ type: SENSOR_DELETE_SUCESS, payload: data,sucess:true});\r\n//   } catch (error) {\r\n//     dispatch({ type: SENSOR_DELETE_FAIL, payload: error.message});\r\n//   }\r\n// };\r\n\r\n// const Save = (obj) => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: SENSOR_SAVE_REQUEST});\r\n//     const data = await api.post(\"post-sensor-alert\", obj);\r\n//     // console.log(\"DATA DELETE\",product)\r\n//     dispatch({ type: SENSOR_SAVE_SUCCESS, payload: data,sucess:true});\r\n//   } catch (error) {\r\n//     dispatch({ type: SENSOR_SAVE_ERROR, payload: error.message});\r\n//   }\r\n// };\r\n\r\n\r\nexport { listSensor};","const SENSOR_LIST_REQUEST = \"SENSOR_LIST_REQUEST\";\r\nconst SENSOR_LIST_SUCESS = \"SENSOR_LIST_SUCESS\";\r\nconst SENSOR_LIST_FAIL = \"SENSOR_LIST_FAIL\";\r\n\r\nconst SENSOR_DETAILS_REQUEST = \"SENSOR_DETAILS_REQUEST\";\r\nconst SENSOR_DETAILS_SUCESS = \"SENSORDETAILST_SUCESS\";\r\nconst SENSOR_DETAILS_FAIL = \"SENSOR_DETAILS_FAIL\";\r\n\r\nconst SENSOR_DELETE_REQUEST = \"SENSOR_DELETE_REQUEST\";\r\nconst SENSOR_DELETE_SUCESS = \"SENSOR_DELETE_SUCESS\";\r\nconst SENSOR_DELETE_FAIL = \"SENSOR_DELETE_FAIL\";\r\n\r\nconst SENSOR_ALERT_REQUEST = \"SENSOR_ALERT_REQUEST\";\r\nconst SENSOR_ALERT_SUCCESS = \"SENSOR_ALERT_SUCCESS\";\r\nconst SENSOR_ALERT_ERROR = \"SENSOR_ALERT_ERROR\";\r\n\r\nconst SENSOR_SAVE_REQUEST = \"SENSOR_SAVE_REQUEST\";\r\nconst SENSOR_SAVE_SUCCESS = \"SENSOR_SAVE_SUCCESS\";\r\nconst SENSOR_SAVE_ERROR = \"SENSOR_SAVE_ERROR\";\r\n\r\n\r\nexport {\r\n  SENSOR_LIST_FAIL,\r\n  SENSOR_LIST_SUCESS,\r\n  SENSOR_LIST_REQUEST,\r\n  SENSOR_DETAILS_FAIL,\r\n  SENSOR_DETAILS_REQUEST,\r\n  SENSOR_DETAILS_SUCESS,\r\n  SENSOR_DELETE_FAIL,\r\n  SENSOR_DELETE_REQUEST,\r\n  SENSOR_DELETE_SUCESS,\r\n  SENSOR_ALERT_REQUEST,\r\n  SENSOR_ALERT_SUCCESS,\r\n  SENSOR_ALERT_ERROR,\r\n  SENSOR_SAVE_SUCCESS,\r\n  SENSOR_SAVE_ERROR,\r\n  SENSOR_SAVE_REQUEST\r\n};","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nimport MainScreen from \"./screens/main\";\r\n\r\n\r\nfunction Routes() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/\" component={MainScreen} exact/>\r\n        {/* <Route path=\"/Edit/:id\" component={EditScreen}/> */}\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\n\r\nimport \"./Global.css\";\r\nimport Route from \"./routes\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Route />\r\n      <ToastContainer autoClose={3000}>\r\n        position=\"top-right\" \r\n        autoClose={2000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick rtl={false}\r\n        pauseOnFocusLoss \r\n        draggable \r\n        pauseOnHover\r\n      </ToastContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createStore, combineReducers, compose, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {\r\n  SensorListReducer,\r\n} from \"../Reducers/SensorListReducer\";\r\nconst initialState = {};\r\n\r\nconst reducer = combineReducers({\r\n  sensorList: SensorListReducer,\r\n  // sensorDetail:SensorDetailReducer,\r\n  // SensorDelete: SensorDeleteReducer,\r\n  // SensorAlertList:SensorAlertListReducer,\r\n  // SensorSave: SensorSaveReducer\r\n});\r\nconst composeEnnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  initialState,\r\n  composeEnnhancer(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store","// Constantes usadas para evitar erros de digitações\r\nimport {\r\n  SENSOR_LIST_FAIL,\r\n  SENSOR_LIST_REQUEST,\r\n  SENSOR_LIST_SUCESS,\r\n} from \"../Constants/SensorContants\";\r\n\r\n// Reducar irá possuir um estado inicial e recebe action\r\nfunction SensorListReducer(state = { sensors: [] }, action) {\r\n  switch (action.type) {\r\n    case SENSOR_LIST_REQUEST:\r\n      return { loading: true, sensors: [] };\r\n    case SENSOR_LIST_SUCESS:\r\n      return { loading: false, sensors: action.payload };\r\n    case SENSOR_LIST_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// function SensorSaveReducer(state = {  sensor: {} }, action) {\r\n//   switch (action.type) {\r\n//     case SENSOR_SAVE_REQUEST:\r\n//       return { loading: true,  sensor: {} };\r\n//     case SENSOR_SAVE_SUCCESS:\r\n//       return { loading: false,sucess: true, sensor: action.payload };\r\n//     case SENSOR_SAVE_ERROR:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\n// function SensorAlertListReducer(state = { alerts: [] }, action) {\r\n//   switch (action.type) {\r\n//     case SENSOR_ALERT_REQUEST:\r\n//       return { loading: true, alerts: [] };\r\n//     case  SENSOR_ALERT_SUCCESS:\r\n//       return { loading: false, sucess: true ,alerts: action.payload };\r\n//     case SENSOR_ALERT_ERROR:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\n// function SensorDetailReducer(state = { sensor: {} }, action) {\r\n//   switch (action.type) {\r\n//     case SENSOR_DETAILS_REQUEST:\r\n//       return { loading: true };\r\n//     case SENSOR_DETAILS_SUCESS:\r\n//       return { loading: false, sensor: action.payload };\r\n//     case SENSOR_DETAILS_FAIL:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\n// function SensorDeleteReducer(state = { sensor: {} }, action) {\r\n//   switch (action.type) {\r\n//     case SENSOR_DELETE_REQUEST:\r\n//       return { loading: true };\r\n//     case SENSOR_DELETE_SUCESS:\r\n//       return { loading: false, sucess: true, sensor: action.payload };\r\n//     case SENSOR_DELETE_FAIL:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\nexport { SensorListReducer};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport store from \"./store/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n    \r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}